def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbour in graph.get(node, []):
            dfs(visited, graph, neighbour)

visited = set()
graph = {}

while True:
    node = input("Enter node (or 'q' to quit): ")
    if node == 'q':
        break
    neighbours = input("Enter neighbours (comma-separated, or 'q' to quit): ")
    if neighbours == 'q':
        break
    graph[node] = neighbours.split(',')

start_node = input("Enter the starting node for DFS: ")

print("Following is the Depth-First Search:")
dfs(visited, graph, start_node)










visited = []
queue = []

def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)

    while queue:
        m = queue.pop(0)
        print(m, end=" ")

        for neighbor in graph[m]:
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)

# Take input from the user for the graph
graph = {}
num_vertices = int(input("Enter the number of vertices in the graph: "))

for i in range(num_vertices):
    vertex = input(f"Enter the name of vertex {i+1}: ")
    neighbors = input(f"Enter the neighbors of vertex {vertex} (space-separated): ").split()
    graph[vertex] = neighbors

start_vertex = input("Enter the starting vertex: ")

# Perform BFS on the user-defined graph
print("Following is the Breadth-First Search:")
bfs(visited, graph, start_vertex)
